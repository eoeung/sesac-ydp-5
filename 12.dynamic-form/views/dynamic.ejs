<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>동적 폼 전송</title>

    <!-- jquery cdn -->
    <script
      src="https://code.jquery.com/jquery-3.7.0.min.js"
      integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g="
      crossorigin="anonymous"
    ></script>

    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <style>
      div.result {
        font-size: 24px;
        font-weight: 700;
      }
    </style>
  </head>
  <body>
    <h1>동적 폼 전송 연습하기!</h1>

    <!-- 이름, 성별(라디오버튼)을 정보를 입력받는 폼 -->
    <form name="register">
      <label for="name">이름</label>
      <input type="text" id="name" name="name" required />
      <br />

      성별
      <input type="radio" name="gender" value="m" id="male" required />
      <label for="male">남</label>
      <input type="radio" name="gender" value="f" id="female" />
      <label for="female">여</label>
      <br />
      <br />

      <!-- Ajax -->
      <button type="button" onClick="ajaxGet();">Ajax Get 제출</button>
      <button type="button" onClick="ajaxPost();">Ajax Post 제출</button>

      <br />
      <br />

      <!-- Axios -->
      <button type="button" onClick="axiosGet();">
        Axios Get 제출 (+ form validation)
      </button>
      <button type="button" onClick="axiosPost();">Axios Post 제출</button>

      <br />
      <br />

      <!-- Fetch -->
      <button type="button" onClick="fetchGet();">Fetch Get 제출</button>
      <button type="button" onClick="fetchPost();">Fetch Post 제출</button>
    </form>

    <hr />
    <hr />
    <hr />

    <h1>open API를 이용해 고양이 사진 랜덤 돌리기!</h1>
    <button onclick="changeImg();">랜덤</button>

    <br /><br />

    <img
      src="https://i1.sndcdn.com/avatars-000349784990-sl1e1v-t500x500.jpg"
      alt="랜덤박스"
      title="랜덤박스"
      width="500"
      height="500"
    />

    <!-- 동적 폼 전송 결과를 보여줄 곳 -->
    <div class="result"></div>

    <script>
      // frontend javascript
      const resultBox = document.querySelector('div.result');
      const img = document.querySelector('img');

      /////////// Ajax ///////////
      function ajaxGet() {
        console.log('ajaxGet 함수 호출!');

        // 폼 선택
        const form = document.forms['register'];

        // 폼 객체 요소 확인
        console.dir(form);
        console.dir(form.name);
        console.dir(form.gender);
        console.dir(form.name.value); // 이름 input에 입력한 값
        console.dir(form.gender.value); // 성별 radio input을 선택한 값

        // 요청에 실어서 보낼 데이터 변수 (서버에서 받을 정보)
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // Ajax로 서버에 Get 요청 보내기
        $.ajax({
          type: 'get', // 요청의 종류 (= form의 method 속성)
          url: '/ajax', // 요청의 경로 (= form의 action 속성)
          data: data, // 요청에 실어보낼 데이터 (서버가 받게 될 데이터)
          success: function (data) {
            // 요청이 성공적으로 수행되었을 때 실행할 함수
            console.log(data);
            resultBox.textContent = `GET /ajax 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
          },
        });
      }

      function ajaxPost() {
        console.log('ajaxPost 함수 호출!');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        }; // 서버로 보낼 데이터를 만듦

        $.ajax({
          type: 'post',
          url: '/ajax',
          data: data,
          success: function (data) {
            console.log(data);
            resultBox.textContent = `POST /ajax 요청 완료!! ${data.name}님은 ${data.gender}이시죠?ㅎㅎ`;
          },
        });
      }

      /////////// Axios ///////////
      // 나의 풀이
      // function axiosGet() {
      //   console.log('axiosGet 함수 호출');

      //   const form = document.forms['register'];
      //   const data = {
      //     name: form.name.value,
      //     gender: form.gender.value,
      //   };

      //   // axios 요청의 결과는 Promise 객체
      //   // → then, catch 메서드로 체이닝이 가능
      //   // → async, await 도 사용할 수 있음
      //   // axios({
      //   //   //   method: 'get', // 요청 방식 (= form method 속성)
      //   //   //   url: '/axios', // 요청 경로 (= form action 속성)
      //   //   //   params: data, // 서버로 보낼 데이터 (QueryString)
      //   //   method: 'get', // 요청 방식 (= form method 속성)
      //   //   url: `/axios?name=${form.name.value}&gender=${form.gender.value}`, // 요청 경로 (= form action 속성) → params라는 key를 사용하지 않고, url에 QueryString을 실어서 보내는 것도 가능
      //   // })
      //   //   .then(function (response) {
      //   //     console.log(response); // 서버의 응답 결과
      //   //     console.log(response.data); // 서버의 응답 데이터

      //   //     // Quiz 1. 객체 구조 분해
      //   //     const { name, gender } = response.data;
      //   //     resultBox.textContent = `GET /axios 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ`;
      //   //   })
      //   //   .catch(function (err) {
      //   //     console.log(err);
      //   //   });

      //   // Quiz 2. axios 요청 처리 async/await로 변경
      //   function abc() {
      //     return axios({
      //       //   method: 'get', // 요청 방식 (= form method 속성)
      //       //   url: '/axios', // 요청 경로 (= form action 속성)
      //       //   params: data, // 서버로 보낼 데이터 (QueryString)
      //       method: 'get', // 요청 방식 (= form method 속성)
      //       url: `/axios?name=${form.name.value}&gender=${form.gender.value}`, // 요청 경로 (= form action 속성) → params라는 key를 사용하지 않고, url에 QueryString을 실어서 보내는 것도 가능
      //     });
      //   }

      //   async function exec() {
      //     const response = await abc();
      //     const { name, gender } = response.data;
      //     resultBox.textContent = `GET /axios 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ`;
      //   }

      //   exec();
      // }

      // 정답
      async function axiosGet() {
        console.log('axiosGet 함수 호출');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        console.log(form.name.checkValidity());
        // 같은 name으로 묶인 radio btn은 하나만 선택되더라도 true를 반환
        console.log(form.gender[0].checkValidity());
        console.log(form.gender[1].checkValidity());

        // axios 요청의 결과는 Promise 객체
        // → then, catch 메서드로 체이닝이 가능
        // → async, await 도 사용할 수 있음
        // axios({
        //   //   method: 'get', // 요청 방식 (= form method 속성)
        //   //   url: '/axios', // 요청 경로 (= form action 속성)
        //   //   params: data, // 서버로 보낼 데이터 (QueryString)
        //   method: 'get', // 요청 방식 (= form method 속성)
        //   url: `/axios?name=${form.name.value}&gender=${form.gender.value}`, // 요청 경로 (= form action 속성) → params라는 key를 사용하지 않고, url에 QueryString을 실어서 보내는 것도 가능
        // })
        //   .then(function (response) {
        //     console.log(response); // 서버의 응답 결과
        //     console.log(response.data); // 서버의 응답 데이터

        //     // Quiz 1. 객체 구조 분해
        //     const { name, gender } = response.data;
        //     resultBox.textContent = `GET /axios 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ`;
        //   })
        //   .catch(function (err) {
        //     console.log(err);
        //   });

        // Quiz 2. axios 요청 처리 async/await로 변경
        try {
          // 폼 유효성 검사
          if (!form.name.checkValidity()) {
            // name input에 입력된 값이 없다면, '이름을 입력해주세요.'
            resultBox.textContent = '이름을 입력해주세요.';
            return;
          } else if (!form.gender[0].checkValidity()) {
            // gender radio btn을 선택하지 않았다면, '성별을 선택해주세요.'
            resultBox.textContent = '성별을 선택해주세요.';
            return;
          }
          
          // 둘 다 입력이 잘 되었다면, axios로 back에 요청 날리기
          const response = await axios({
            method: 'get', // 요청 방식 (= form method 속성)
            url: '/axios', // 요청 경로 (= form action 속성)
            params: data, // 서버로 보낼 데이터 (QueryString)
          });
          // console.log(response);

          // Quiz 1. 객체 구조 분해
          const { name, gender } = response.data;
          resultBox.textContent = `GET /axios 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ`;
        } catch (err) {
          console.log(err);
        }
      }

      // promise
      // function axiosPost() {
      //   console.log('axiosPost 함수 호출');

      //   const form = document.forms['register'];
      //   const data = {
      //     name: form.name.value,
      //     gender: form.gender.value,
      //   };

      //   axios({
      //     method: 'post',
      //     url: '/axios',
      //     data: data,
      //   })
      //     .then((response) => {
      //       const { name, gender } = response.data;
      //       resultBox.textContent = `POST /axios 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ`;
      //     })
      //     .catch((err) => {
      //       console.log(err);
      //     });
      // }

      // async/await
      async function axiosPost() {
        console.log('axiosPost 함수 호출');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // 에러 처리
        try {
          const response = await axios({
            method: 'post',
            url: '/axios',
            data: data,
          });

          console.log(response.data);
          console.log(response.status);
          console.log(response.statusText);
          console.log(response.headers);
          console.log(response.config);
          const { name, gender } = response.data;
          resultBox.textContent = `POST /axios 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ`;
        } catch (err) {
          console.log(err);
        }
      }

      /////////// Fetch ///////////
      // fetch(url, options)
      function fetchGet() {
        console.log('fetchGet 호출');

        const form = document.forms['register'];
        fetch(`/fetch?name=${form.name.value}&gender=${form.gender.value}`)
          .then((response) => {
            console.log(response);
            return response.json();
            // JSON 형태로 응답 데이터를 전달받음
            // Response 객체는 json()메서드를 제공
            // Response 객체로부터 JSON 포맷의 응답 전문을 JavaScript Object로 변환해줌
          })
          .then((data) => {
            // data: 직전 then() 메서드의 리턴값을 data라는 변수에 담아서 준다. → return response.json()
            console.log(data);

            const { name, gender } = data;
            resultBox.textContent = `GET /fetch 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ`;
          })
          .catch((err) => {
            console.log(err);
          }); // fetch는 default로 get 방식 → 작동 options을 생략 가능
      }

      function fetchPost() {
        console.log('fetchPost 호출');

        const form = document.forms['register'];
        const data = {
          name: form.name.value,
          gender: form.gender.value,
        };

        // fetch를 이용해 post요청을 할 때에는 option 객체가 반드시 필요함
        // 1. method 키: post 지정
        // 2. headers 키: JSON 포맷 사용 선언
        // 3. body 키: 서버로 보낼 데이터
        fetch('/fetch', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json', // HTTP 표준 규격
          },
          body: JSON.stringify(data),
          // data: Javascript object
          // JSON.stringify(data): Js Obj → json
        })
          .then((response) => {
            console.log(response);
            return response.json();
          })
          .then((data) => {
            console.log(data);

            const { name, gender } = data;
            resultBox.textContent = `POST /fetch 요청 완료!! ${name}님은 ${gender}이시죠?ㅎㅎ`;
          });
      }

      async function changeImg() {
        const response = await axios({
          method: 'get',
          url: 'https://api.thecatapi.com/v1/images/search',
        });

        console.log(response);
        const { data } = response;
        img.src = data[0].url;
      }
    </script>
  </body>
</html>
